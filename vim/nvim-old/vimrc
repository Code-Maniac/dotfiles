" PLUGINS
call plug#begin('~/.vim/plugged')
	" COLORSCHEMES
	" Plug 'rafi/awesome-vim-colorschemes'
	Plug 'dracula/vim', {'as':'dracula'}

	" CODE GENERATION
	Plug 'Sirver/Ultisnips'
	"personlized snippets
	Plug 'honza/vim-snippets', {
		\'do': 'ln -s ~/.vim/plugged/vim-snippets/snippets ~/.dotfiles/snippets'
	\}

	" SYNTAX HIGHLIGHTING
	Plug 'sheerun/vim-polyglot'

	" CODE COMPLETION
	if has('nvim')
		Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	else
        Plug 'Shougo/deoplete.nvim'
        Plug 'roxma/nvim-yarp'
        Plug 'roxma/vim-hug-neovim-rpc'
	endif

	" deoplete headers
	Plug 'Shougo/neosnippet'
	Plug 'Shougo/neosnippet-snippets'
	Plug 'Shougo/neoinclude.vim'
	Plug 'Shougo/echodoc.vim'

	" language server
	Plug 'prabirshrestha/async.vim' " required for vim-lsp
	Plug 'prabirshrestha/vim-lsp' " Generic Language Protocol client
	Plug 'mattn/vim-lsp-settings' " Automatically install and configure language servers
	Plug 'lighttiger2505/deoplete-vim-lsp'

    " useful stuff
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install --all' }

	" NAVIGATION
	Plug 'easymotion/vim-easymotion'

	Plug 'tpope/vim-repeat'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-ragtag'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-endwise'
	Plug 'tpope/vim-abolish'
	Plug 'tpope/vim-unimpaired'
	Plug 'tpope/vim-afterimage'
	Plug 'tpope/vim-dispatch'
	Plug 'vim-scripts/argtextobj.vim'
	Plug 'AndrewRadev/splitjoin.vim'
	Plug 'alvan/vim-closetag'

	" BETTER VIM DIFF
	Plug 'chrisbra/vim-diff-enhanced'

	" BETTER VIM-TMUX WINDOW NAVIGATION
	Plug 'christoomey/vim-tmux-navigator'

	" GUI FILE EXPLORER IN VIM
	Plug 'preservim/nerdtree'
	Plug 'justinmk/vim-gtfo'

	" AIRLINE THEMES
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
call plug#end()

" set the leader key
let mapleader = ","

" set fullscreen mode on startup in gui mode.
if has("gui_running")
    set lines=1200 columns=1200
endif

" SET COMPAT AND COLOR MODE
" set nocompatible " Vim rather than Vi
" set t_Co=256

" COLORS
set termguicolors
set background=dark
colorscheme dracula
if &term =~ '256color'
    set t_ut=
endif

" set guifont="MesloLGS NF"

" GENERAL STUFF
set ruler                           " always show cursor position.
set showmode                        " display curent mode.
set showcmd                         " display incomplete commands.
set nu                              " show line numbers.
set relativenumber
set undofile                        " stores undo state even when files are closed.
set title                           " show file in titlebar
set showmatch                       " shows matching bracket - briefly jumps to it.
set backspace=indent,eol,start      " liberal backspacing in insert mode
set nowrapscan                      " don't wrap to start of file when forward searching.

" DEFAULT TAB STOPS & INDENTING
set tabstop=4                       " tab stops
set softtabstop=4
set shiftwidth=4                    " number of spaces to use for each step of (auto)indent
set expandtab
set autoindent
set smartindent
set copyindent
set smarttab

" g0 aligns private, public with class
" :0 aligns case statements to switch
set cino+=(0,g0,:0,t0,l1
set list
set listchars=tab:▸\ ,eol:¬,trail:~ "highlight tabs with an arrow. eol with ¬. trailing whitespace with ~

set history=1000                    " many histories
set smartcase
set ttyfast                         " smoother output, they claim

" SEARCH
set ignorecase
set incsearch

" TEXT WIDTH BASED ON FILETYPE
let s:text_widths = [
   \ ['cpp', 80 ],
   \ ['c', 80 ],
   \ ['hpp', 80 ],
   \ ['h', 80 ],
   \ ['gitcommit', 80],
   \ ['javascript', 80],
   \ ['qml', 80]
\ ]
for text_width in s:text_widths
	execute "autocmd Filetype " . text_width[0] . " setlocal tw=" . text_width[1]
	execute "autocmd Filetype " . text_width[0] . " setlocal colorcolumn=+1"
endfor

" SET LOCATION OF VIMFILES SWAP, UNDO ETC
set dir=~/.vim/swap
set undodir=~/.vim/undo

" WINDOW SWITCHING
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-l> <C-w>l

" WINDOW RESIZING
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>

" Unicode support
if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	set encoding=utf-8
	setglobal fileencoding=utf-8
	set fileencodings=ucs-bom,utf-8,latin1
endif

" remain in visual mode when >> <<
vnoremap < <gv
vnoremap > >gv

"NERDTree
"open NERDTree
map <C-n> :NERDTreeToggle<CR>

" FZF
"open fzf
map <C-t> :FZF<CR>
"bind keys when in fzf window.
let g:fzf_action = {
	\ 'ctrl-t': 'tab split',
	\ 'ctrl-x': 'split',
	\ 'ctrl-v': 'vsplit' }
" set fzf layout
if has('nvim')
	let g:fzf_layout = { 'window': 'enew' }
else
	let g:fzf_layout = { 'down': "25%" }
endif

" set fzf colors to current colorscheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" enable per command history.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" DEOPLETE
let g:deoplete#enable_at_startup=1
" use tab selection of popup menu with deoplete
inoremap <expr> <tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" vertical diff
set diffopt+=vertical

" VIM-Powerline
"set laststatus=2
let g:Powerline_symbols='fancy'

" VIM-AIR-LINE
let g:airline#extentions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

"let g:airline_section_b = '%{strftime("%c")}'
let g:airline_section_y = 'BN: %{bufnr("%")}'

" TECHNICAL
set mouse=a
set fileencoding=utf-8

" ultisnips
" Trigger configuration.
let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" If you want :UltiSnipsEdit to split your window. horzontally above the
" current doc.
let g:UltiSnipsEditSplit="horizontal"

let g:UltiSnipsSnippetsDir = "~/.vim/plugged/vim-snippets/snippets"

map <F2> :UltiSnipsEdit<CR>

" delete trailing whitespace on write in certain filetypes
autocmd BufWritePre *.c,*.cpp,*.h,*.hpp :%s/\s\+$//e

" go back to the line we were on when we last closed the file.
if !&diff
	autocmd BufReadPost * if &filetype !=# 'gitcommit' | if line("'\'") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif
